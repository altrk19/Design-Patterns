Subject – interface or abstract class defining the operations for attaching and de-attaching observers to the subject.

ConcreteSubject – concrete Subject class. It maintain the state of the object and when a change in the state occurs it notifies the attached Observers.

Observer – interface or abstract class defining the operations to be used to notify this object.

ConcreteObserver – concrete Observer implementations.


Benefits of the observer pattern?
The subject and observers make a loosely coupled system. They do not need to know each other explicitly. We can independently add or remove observers at any time.


Can I add or remove observers at runtime?
Yes. We can add or remove the observers at any point of time.



Real world example of observer pattern
- A real world example of observer pattern can be any social media platform such as Facebook or twitter. When a person updates his status – all his followers gets the notification.

- Similarly, Java UI based programming, all keyboard and mouse events are handled by it’s listeners objects and designated functions. When user click the mouse, function subscribed to the mouse click event is invoked with all the context data passed to it as method argument.